<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phil&#39;s Blog</title>
    <link>https://www.philipdaniels.com/</link>
    <description>Recent content on Phil&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Jan 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.philipdaniels.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A C# Source Generator for Oracle UDTs</title>
      <link>https://www.philipdaniels.com/blog/2022/oracle-udt-class-generator/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2022/oracle-udt-class-generator/</guid>
      <description>Introduction Working with Oracle recently, I found myself wanting an equivalent of SQL Server&amp;rsquo;s Table-Valued Parameters - a way to pass structured records, or tables of such records, into stored procedures. The Oracle equivalent is the User-Defined Data Type but using them requires quite a bit of work. I&amp;rsquo;ve created BassUtils.Oracle which contains helpers for creating the correct OracleCommand parameters, described in a previous blog post. But that still leaves you having to manually code the C# class that Oracle requires to map them to and from the Oracle SQL types.</description>
    </item>
    
    <item>
      <title>BassUtils.Oracle - Helpers for Calling Oracle from C#</title>
      <link>https://www.philipdaniels.com/blog/2021/oracle-from-csharp/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2021/oracle-from-csharp/</guid>
      <description>Oracle, eh? My new job requires me to deal with Oracle for the first time in anger. I&amp;rsquo;ve found Oracle to be both impressive (PL/SQL is far more powerful than T-SQL) and frustrating. When things go wrong the error messages are often confusing, at best, and at worst positively misleading.
Most of my time has been spent trying to get data in and out of Oracle using C#, in particular I have been looking at doing bulk-loads of classes, in other words, how to get multiple records of data into and out of Oracle ergonomically.</description>
    </item>
    
    <item>
      <title>Rust Fn Traits</title>
      <link>https://www.philipdaniels.com/blog/2021/rust-fn-traits/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2021/rust-fn-traits/</guid>
      <description>The Rust Fn Traits There are 3 traits, defined as follows
pub trait Fn&amp;lt;Args&amp;gt;: FnMut&amp;lt;Args&amp;gt; { extern &amp;#34;rust-call&amp;#34; fn call(&amp;amp;self, args: Args) -&amp;gt; Self::Output; } pub trait FnMut&amp;lt;Args&amp;gt;: FnOnce&amp;lt;Args&amp;gt; { extern &amp;#34;rust-call&amp;#34; fn call_mut( &amp;amp;mut self, args: Args ) -&amp;gt; Self::Output; } pub trait FnOnce&amp;lt;Args&amp;gt; { type Output; extern &amp;#34;rust-call&amp;#34; fn call_once(self, args: Args) -&amp;gt; Self::Output; } Fn callables can be called repeatedly without mutating their argument (they take arguments by &amp;amp;).</description>
    </item>
    
    <item>
      <title>Handy SQL HAVING Clauses</title>
      <link>https://www.philipdaniels.com/blog/2021/havings/</link>
      <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2021/havings/</guid>
      <description>Tricks with the &amp;lsquo;HAVING&amp;rsquo; clause Over the years I have collected a few handy HAVING clauses for SQL work. Here&amp;rsquo;s a summary, with some test cases.
n.b. Watch out if you have nulls in your data! Some of these expressions will then degenerate into expressions comparing NULL for equality, which is obviously never true.
We&amp;rsquo;ll need a table for testing:
drop table foo; create table foo(a int, b int) Contents  All values in B are distinct No NULLs in B B is all positive or all negative min(B) is negative, max(B) isn&amp;rsquo;t B has at least one zero min(B) or max(B) or both is 0 B has more than 1 distinct value B has only 1 distinct value, or nulls B deviates above and below const by the same amount Values in B are sequential with no gaps  All values in B are distinct delete foo; insert into foo(a, b) values (1, 0); insert into foo(a, b) values (1, 1); insert into foo(a, b) values (1, 2); insert into foo(a, b) values (2, 0); insert into foo(a, b) values (2, 0); select a from foo group by a having count(distinct b) = count(b) No NULLs in B delete foo; insert into foo(a, b) values (1, 0); insert into foo(a, b) values (1, 1); insert into foo(a, b) values (1, 2); insert into foo(a, b) values (2, 0); insert into foo(a, b) values (2, null); select a from foo group by a having count(*) = count(b) B is all positive or all negative delete foo; insert into foo(a, b) values (1, 0); insert into foo(a, b) values (1, 1); insert into foo(a, b) values (1, 2); insert into foo(a, b) values (2, 1); insert into foo(a, b) values (2, 2); insert into foo(a, b) values (2, 3); insert into foo(a, b) values (3, -1); insert into foo(a, b) values (3, -2); insert into foo(a, b) values (3, -3); insert into foo(a, b) values (4, 4); insert into foo(a, b) values (4, -2); insert into foo(a, b) values (4, -3); insert into foo(a, b) values (5, 0); insert into foo(a, b) values (5, 0); insert into foo(a, b) values (5, 0); select a from foo group by a having min(b) * max(b) &amp;gt; 0 If you change the above to having sign(min(b)) = sign(max(b)) then B can be all positive, all negative, or all zero.</description>
    </item>
    
    <item>
      <title>Cloning yourself - a refactoring for thread-spawning Rust types</title>
      <link>https://www.philipdaniels.com/blog/2020/self-cloning-for-multiple-threads-in-rust/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2020/self-cloning-for-multiple-threads-in-rust/</guid>
      <description>I recently discovered for myself a very nice Rust refactoring (or pattern?) which produced a very significant simplification in some code I am working on.
I would like to share it with you. I&amp;rsquo;d say this is an intermediate-level article, since the Rust compiler won&amp;rsquo;t lead you towards this design, good as its error messages are.
The Problem I wanted to create a Rust type - let&amp;rsquo;s call it JobEngine - that would be used in many places in my program, and from multiple threads.</description>
    </item>
    
    <item>
      <title>Some simple Rust async-std examples</title>
      <link>https://www.philipdaniels.com/blog/2019/async-std-demo1/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/async-std-demo1/</guid>
      <description>Introduction As everyone knows, Rust recently stabilized the async/await feature. My first attempt to convert a little program I had to use it was a dismal failure, (reasons are at the bottom of this post), so I thought I would step back and write some simple - and I do mean very simple - examples of how to use await. The final step in this post shows how to download multiple URLs, in parallel, which was the business problem I was trying to solve in the first place.</description>
    </item>
    
    <item>
      <title>Rust File IO</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-file-io/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-file-io/</guid>
      <description>See std::io for more details.
For dealing with the filesystem, such as opening or deleting files, see std::fs.
For manipulating paths, see std::path.
For low-level network IO, see std::net.
One Liners for Reading the Entire File Use read_to_string and read.
These are both fast as they allocate a buffer of the required size to start with.
let contents: String = std::fs::read_to_string(&amp;#34;/some/file&amp;#34;)?; let bytes: Vec&amp;lt;u8&amp;gt; = std::fs::read(&amp;#34;/some/file&amp;#34;)?; One Liners for Writing the Entire File Use write.</description>
    </item>
    
    <item>
      <title>Ripgrep Cheatsheet</title>
      <link>https://www.philipdaniels.com/blog/2019/ripgrep-cheatsheet/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/ripgrep-cheatsheet/</guid>
      <description>Ripgrep    Syntax Description     rg &amp;ndash;help | more Make help useful on Windows   rg -l NEEDLE List matching files only   rg -c NEEDLE List matching files, including a count   rg -i NEEDLE Search case-insensitively   rg --no-filename NEEDLE Don&amp;rsquo;t print filenames, handy when you care about the match more than the file   rg -v NEEDLE Invert matching: show lines that do not match   rg NEEDLE README.</description>
    </item>
    
    <item>
      <title>Turbo-Charging Rust Release Mode Builds</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-release-mode-builds/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-release-mode-builds/</guid>
      <description>Configuring the release profile Here are some settings you can specify in Cargo.toml for fastest possible Release mode builds. Expect these changes to make marginal differences (5-10%? YMMV). If you are using a workspace you should specify this in the top-level Cargo.toml only.
[profile.release] # Enable link-time optimization, eliminates more code and inlines across crate boundaries. # Default: false lto = true # codegen-units of 1 gives best optimization, but disables parallel building.</description>
    </item>
    
    <item>
      <title>Hand-Implementing PartialEq, Eq, Hash, PartialOrd and Ord in Rust</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-equality-and-ordering/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-equality-and-ordering/</guid>
      <description>Introduction This article is a short how-to guide for writing your own implementations of the equality, hashing and ordering traits in Rust. Often you can just auto-derive these:
#[derive(PartialEq, Eq, Hash, PartialOrd, Ord)] pub MyStruct { ... } But sometimes you want to roll your-own, perhaps because you can do it more efficiently than the automatic versions, or you simply want to be more explicit about what it means for two things to be &amp;lsquo;equal&amp;rsquo; or perhaps you want to express relationships between instances of MyStruct and SomeOtherStruct, which the automatic versions can&amp;rsquo;t do.</description>
    </item>
    
    <item>
      <title>Top VS Code Extensions</title>
      <link>https://www.philipdaniels.com/blog/2019/vscode-extensions/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/vscode-extensions/</guid>
      <description>Extensions  Git Lens More git power! Git Graph Nice SourceTree-like git graphs TODO Tree Scans code for TODO, FIXME etc and presents in the sidebar Better TOML For editing TOML files such as Cargo.toml RLS The Rust language server Code LLDB For debugging Rust. See Windows caveats. C# by Omnisharp  Debugging in Rust Install the above tools (RLS, LLDB) then follow this guidance</description>
    </item>
    
    <item>
      <title>An Ergonomic Approach to Configuration in Rust</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-configuration-example/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-configuration-example/</guid>
      <description>Ergonomic Configuration In most of the programs I have written so far the configuration consists of a combination of defaults, optional settings from configuration files, and command line options, in that order of precedence.
And once established, it is usually immutable.
Setting this up is not difficult, but it helps to have a worked example, as otherwise it is easy to get lost in what to call things.
I have created a worked example which has the following features:</description>
    </item>
    
    <item>
      <title>Design of Rust APIs (Collections and Iteration)</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-api-design2/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-api-design2/</guid>
      <description>Iterators as Input Parameters This is reasonable:
fn func1(data: &amp;amp;[i32]) {} But if a function only needs to iterate over its data you can use the IntoIterator trait to make it more generic:
fn func2&amp;lt;C&amp;gt;(data: C) where C: IntoIterator&amp;lt;Item = i32&amp;gt; (Ref: API Guidelines)
Constructing and Extending Collections If you have a type that is a collection type, you should consider implementing the FromIterator and Extend traits.
FromIterator allows instances of your collection to be constructed using collect and Extend allows you to easily add the contents of an iterator to a collection via the extend method.</description>
    </item>
    
    <item>
      <title>Design of Rust APIs (AsRef, Into, Cow)</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-api-design/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-api-design/</guid>
      <description>Flexible Input Parameters There are two generic built-in traits you can use to make your function easy to call.
They are AsRef and Into.
AsRef (and AsMut) AsRef allows a function to be called with parameters of differing types - basically anything that allows a reference of the appropriate type to be created cheaply and without ever failing. AsMut is the same but for mutable references.
Example:
fn func1(p1: PathBuf); fn func2(p1: &amp;amp;Path); fn func3&amp;lt;S&amp;gt;(p1: S) where S: AsRef&amp;lt;Path&amp;gt; { let p1 = p1.</description>
    </item>
    
    <item>
      <title>Defining Rust Error Types</title>
      <link>https://www.philipdaniels.com/blog/2019/defining-rust-error-types/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/defining-rust-error-types/</guid>
      <description>Defining your own error type When starting a new project, defining your own error type up-front is a good thing to do. It will result in more ergonomic code, as you can return the same error type from most functions and can get it to work with the ? operator. This is especially important if you use external crates and want to &amp;lsquo;amalgamate&amp;rsquo; their error types.
The strategy defined here is the TL;DR summary of a blog post by Rustmeister BurntSushi.</description>
    </item>
    
    <item>
      <title>Common Unicode Characters</title>
      <link>https://www.philipdaniels.com/blog/2019/common-unicode-characters/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/common-unicode-characters/</guid>
      <description>Typing Unicode characters on Linux Hold down CTRL-SHIFT, then type the Unicode sequence. For example, for a £ (GBP, British Pound sign) which is U+00a3, type CTRL-SHIFT ua3 SPC - the space is to terminate the sequence.
Typing Unicode characters on Windows Open MS Word or Wordpad and type the code point followed by ALT-x, for example to enter a Euro sign type 20acALT-X.
Some handy characters See here for more.</description>
    </item>
    
    <item>
      <title>File Management in the Terminal</title>
      <link>https://www.philipdaniels.com/blog/2019/terminal-file-management/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/terminal-file-management/</guid>
      <description>Copying files and directories  cp manual Duplicate an entire directory including subfolders cp -r SRC DEST Create a symbolic link to a file cp -s FILE NEWLINK (equivalent to ln -s FILE NEWLINK) Create a hard link to a file cp -l FILE NEWLINK (equivalent to ln FILE NEWLINK)  Getting information  stat manual Print last access time, modify time etc. stat FILE du manualShow summary size of a directory in human language du -sh DIR  Exclude certain files --exclude=’*.</description>
    </item>
    
    <item>
      <title>File Sharing Between Linux and Windows</title>
      <link>https://www.philipdaniels.com/blog/2019/linux-windows-file-sharing/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/linux-windows-file-sharing/</guid>
      <description>Creating a Samba Share on Linux Edit /etc/samba/smb.conf adding a stanza at the bottom something like this ([slow] is the name the share will have). Notice the valid users.
[slow] path = /home/phil/slow available = yes valid users = phil read only = no browsable = yes public = yes writable = yes Then do sudo smbpasswd -a USER and enter a Samba password for the user, then restart Samba sudo service smbd restart.</description>
    </item>
    
    <item>
      <title>Installing LibreOffice with Python Scripting Support</title>
      <link>https://www.philipdaniels.com/blog/2019/libreofffice-with-python-scripting/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/libreofffice-with-python-scripting/</guid>
      <description>See
 https://ask.libreoffice.org/en/question/154007/how-to-upgrade-libreoffice-version-using-linux-mint/ https://askubuntu.com/questions/132837/how-do-i-install-the-latest-stable-version-of-libreoffice And for python: https://ask.libreoffice.org/en/question/140787/where-does-libreoffice-expect-user-scripts-pythonjavajavascript-to-be-located-on-ubuntu/  Basically I just did:
sudo add-apt-repository ppa:libreoffice/ppa sudo apt-get update sudo apt-get upgrade # Should try dist-upgrade instead sudo apt install libreoffice # Needed to bring down the latest version sudo apt install libreoffice-script-provider-python </description>
    </item>
    
    <item>
      <title>Installing Wine and Quicken 2000 on Linux Mint</title>
      <link>https://www.philipdaniels.com/blog/2019/installing-wine-and-quicken-on-mint/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/installing-wine-and-quicken-on-mint/</guid>
      <description>May need to install the latest Wine manually You may first need to get the latest and greatest version of Wine. Mint 18 shipped with Wine 1.6 which was ancient, I am not sure which version Mint 19 ships with since I did an upgrade. In any case, you can install the latest version of Wine by following [these steps] (https://www.ubuntupit.com/install-winehq-ubuntu-linux-mint-instantly/)
sudo dpkg --add-architecture i386 wget -nc https://dl.winehq.org/wine-builds/Release.key sudo apt-key add Release.</description>
    </item>
    
    <item>
      <title>Linux User Management</title>
      <link>https://www.philipdaniels.com/blog/2019/linux-user-management/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/linux-user-management/</guid>
      <description>useradd manual
  userdel manual
  usermod manual
  passwd manual
  groupadd manual
  groupdel manual
  groups manual
  sudo manual
  su manual
  List all users cat /etc/passwd It’s the first column. Or awk -F : ‘{print $1, “uid=”$3, “gid=”$3}’ /etc/passwd
  List the default settings for adding a new user useradd -D The shell will often be just /bin/sh, which is not what you want</description>
    </item>
    
    <item>
      <title>Process Management in the Terminal</title>
      <link>https://www.philipdaniels.com/blog/2019/process-management-in-the-terminal/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/process-management-in-the-terminal/</guid>
      <description>Signals The recommended signals to stop a program, in increasing severity, are TERM (15), INT (2), HUP (1), KILL (9)
The kill command is used to send signals to a program.
  Send a specific signal to a process: kill -INT PID or kill -2 PID
  The same to several processes: kill -2 PID1 PID2 PID3
  Killing processes by name
  kill processes processes by name killall http*</description>
    </item>
    
    <item>
      <title>The tar command and managing archives</title>
      <link>https://www.philipdaniels.com/blog/2019/tar-and-archives/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/tar-and-archives/</guid>
      <description>Compressing and archiving files For dealing with directories it is normal to use the tar command, see below.
 .bz2 extension is managed by the commands bzip2, bzcat and bunzip2.  Deal with a single file bzip2 FILE1 FILE2…, bzcat FILEs, bzunzip2 FILEs (the file is replaced)   .gz extension is managed by the commands gzip, zcat and gunzip.  Usage is the same as bzip2. It can also uncompress .</description>
    </item>
    
    <item>
      <title>Tmux and Vim true-color support</title>
      <link>https://www.philipdaniels.com/blog/2019/tmux-and-vim-in-truecolor/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/tmux-and-vim-in-truecolor/</guid>
      <description>You will need to compile tmux from source, you need tmux v2.2 at least.
Also need to compile Vim from source, see https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source
Then you need to get tmux working with TrueColor. See https://deductivelabs.com/en/using-true-color-vim-tmux/, especially the comments about .tmux.conf. And https://github.com/tmux/tmux/wiki/FAQ</description>
    </item>
    
    <item>
      <title>Unix Redirections</title>
      <link>https://www.philipdaniels.com/blog/2019/unix-redirections/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/unix-redirections/</guid>
      <description>Redirections  Redirect stdout to a file: &amp;gt; FILE Append stdout to a file: &amp;gt;&amp;gt; FILE Redirect stderr to a file: 2&amp;gt; FILE Redirect stdout and stderr to the same file by redirecting stream 2 to stream 1: &amp;gt; FILE 2&amp;gt;&amp;amp;1  Bash version of the above (non standard, avoid): &amp;amp;&amp;gt; FILE or &amp;amp;&amp;gt;&amp;gt; FILE for appending   Redirect stdout and stderr to different files: &amp;gt; FILE 2&amp;gt; ERRORFILE Read stdin from a file: &amp;lt; FILE Read stdin from a file and write stdout to a file: wc &amp;lt; input.</description>
    </item>
    
    <item>
      <title>Summary of Stephen Cleary&#39;s &#39;Tour of Task&#39; Series</title>
      <link>https://www.philipdaniels.com/blog/2017/tour-of-task/</link>
      <pubDate>Mon, 06 Nov 2017 20:19:45 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2017/tour-of-task/</guid>
      <description>Summary of Stephen Cleary&amp;rsquo;s &amp;lsquo;A Tour of Task&amp;rsquo; articles The first article
 Task as used by TPL is completely different to Task as used by async. The vast majority of Task members have no place in async code. There are two types of Task ** Delegate tasks, which have code to run ** Promise tasks, which represent an event or signal (e.g. IO or timer based) Most TPL code uses Delegate tasks across multiple threads,, most async code uses Promise tasks which don&amp;rsquo;t tie up a thread.</description>
    </item>
    
    <item>
      <title>Spacemacs - Configuring the Solarized Theme</title>
      <link>https://www.philipdaniels.com/blog/2017/spacemacs-solarized/</link>
      <pubDate>Tue, 07 Feb 2017 20:19:45 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2017/spacemacs-solarized/</guid>
      <description>Solarized, tredux There are at least 3 different Solarized theme packages for Emacs:
 BBatsov&amp;rsquo;s Solarized Greg Pfeil&amp;rsquo;s (aka Sellout) Solarized Steve Purcell&amp;rsquo;s (aka SanityInc) Solarized  Steve&amp;rsquo;s is based on Greg&amp;rsquo;s. Of the three, I have always used Greg&amp;rsquo;s in the past, finding it to have a comprehensive set of faces. So naturally I wanted to get it working in Spacemacs. That was a bit trickier than expected, because it uses a non-standard loading mechanism, however, I found an issue on Github that explained how to do it.</description>
    </item>
    
    <item>
      <title>Spacemacs - First Steps</title>
      <link>https://www.philipdaniels.com/blog/2017/spacemacs-first-steps/</link>
      <pubDate>Mon, 06 Feb 2017 20:19:45 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2017/spacemacs-first-steps/</guid>
      <description>Moving to Spacemacs I recently declared, if not quite .emacs bankruptcy , then at least Chapter 11 status. After a long time keeping my .emacs as a single file, I refactored it into a set of self contained lisp files of the form:
(require &amp;#39;other-peoples-packages) ...my config... (provide &amp;#39;my-package) Then I just ensured the director with all these files was on my load-path and simply required my own little packages.</description>
    </item>
    
    <item>
      <title>Network Setup in Hyper-V and Virtual Box</title>
      <link>https://www.philipdaniels.com/blog/2016/vm-networking-overview/</link>
      <pubDate>Tue, 27 Dec 2016 20:19:45 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2016/vm-networking-overview/</guid>
      <description>Other Build Book Posts  Debian VM Setup Setup of SSH Windows VM Setup  Posts in the Build Book sequence are intended primarily as an aide-mémoire for myself; a series of steps to go through for a consistent build experience. They tend to be to the point, prescriptive and tailored for me personally.
In this article I describe the different types of switch available in Hyper-V and their equivalents in Virtual Box.</description>
    </item>
    
    <item>
      <title>Setup of Debian Virtual Machines</title>
      <link>https://www.philipdaniels.com/blog/2016/debian-vm-setup/</link>
      <pubDate>Tue, 27 Dec 2016 20:19:45 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2016/debian-vm-setup/</guid>
      <description>Other Build Book Posts  Setup of SSH Windows VM Setup Network Setup in Hyper-V and Virtual Box  Posts in the Build Book sequence are intended primarily as an aide-mémoire for myself; a series of steps to go through for a consistent build experience. They tend to be to the point, prescriptive and tailored for me personally.
Installation Steps Pick the type of Debian distribution you want. I usually go for Testing to keep up with the latest fixes - it is a rolling release.</description>
    </item>
    
    <item>
      <title>Setup of ssh</title>
      <link>https://www.philipdaniels.com/blog/2016/setup-of-ssh/</link>
      <pubDate>Tue, 27 Dec 2016 20:19:45 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2016/setup-of-ssh/</guid>
      <description>Other Build Book Posts  Debian VM Setup Windows VM Setup Network Setup in Hyper-V and Virtual Box  Posts in the Build Book sequence are intended primarily as an aide-mémoire for myself; a series of steps to go through for a consistent build experience. They tend to be to the point, prescriptive and tailored for me personally.
How SSH Works SSH stands for &amp;ldquo;Secure Shell&amp;rdquo;. As its name implies it is a network protocol for secure communication between two computers, a server - your VM - and a client, e.</description>
    </item>
    
    <item>
      <title>Setup of Windows Virtual Machines</title>
      <link>https://www.philipdaniels.com/blog/2016/windows-vm-setup/</link>
      <pubDate>Tue, 27 Dec 2016 20:14:13 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2016/windows-vm-setup/</guid>
      <description>Other Build Book Posts  Debian VM Setup Setup of SSH Network Setup in Hyper-V and Virtual Box  Posts in the Build Book sequence are intended primarily as an aide-mémoire for myself; a series of steps to go through for a consistent build experience. They tend to be to the point, prescriptive and tailored for me personally.
General  Do not use Windows Enterprise because this edition does not get patched and upgraded like normal Windows does.</description>
    </item>
    
    <item>
      <title>Comparing PersistentDictionary with SQLite as a Key-Value Store</title>
      <link>https://www.philipdaniels.com/blog/2016/persistent-dictionary-vs-sqlite/</link>
      <pubDate>Mon, 27 Jun 2016 20:19:45 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2016/persistent-dictionary-vs-sqlite/</guid>
      <description>Few choices for in-process persistent data stores When it comes to data storage, developers traditionally have had two choices:
 A full-blown database, usually running as separate process. This includes SQL databases such as MS-SQL and PostGres, and NoSQL databases such as Mongo. Hold everything in RAM in standard .Net classes such as Dictionary.  The former has the drawback that some installation is usually required, and the latter doesn&amp;rsquo;t scale to very large datasets.</description>
    </item>
    
    <item>
      <title>Hugo Cheatsheet</title>
      <link>https://www.philipdaniels.com/blog/2016/hugo-blogging-cheatsheet/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2016/hugo-blogging-cheatsheet/</guid>
      <description>A test post to see if the new blog is working, also handy for checking out themes. You really want to look at the source for this page.
Heading 1 Heading 2 Heading 3 Heading 4 Heading 5  Basic Formatting Hugo uses Github Flavoured Markdown.
 *This is italic* This is italic **this is bold** this is bold ***this is bold-italic*** this is bold-italic ~~this is strikethrough~~ this is strikethrough  You can do a link like this: [link](https://github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.philipdaniels.com/configzilla/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/configzilla/license/</guid>
      <description>Copyright (c) HTML5 Boilerplate
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.philipdaniels.com/configzilla/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/configzilla/readme/</guid>
      <description>HTML5 Boilerplate HTML5 Boilerplate is a professional front-end template for building fast, robust, and adaptable web apps or sites.
This project is the product of many years of iterative development and combined community knowledge. It does not impose a specific development philosophy or framework, so you&amp;rsquo;re free to architect your code in the way that you want.
 Source: https://github.com/h5bp/html5-boilerplate Homepage: http://html5boilerplate.com Twitter: @h5bp  Quick start Choose one of the following options:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.philipdaniels.com/gitcheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/gitcheatsheet/</guid>
      <description>Phil&#39;s Git Cheatsheet    You are using an outdated browser. Please upgrade your browser to improve your experience.
           Getting Started Do this first!!! Setup .gitattributes correctly Setup .gitignore correctly Setup ~/.gitconfig correctly config [--global] --unset user.email config [--global] --edit config [--global] user.email Phil@foo.com config --list  Help verb --help man git-verb  Repository Creation and Cloning init clone url [mydir]  Using a Bare Repo as a Central Repo 1a.</description>
    </item>
    
  </channel>
</rss>