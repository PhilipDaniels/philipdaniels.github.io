<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sqlite on Phil&#39;s Blog</title>
    <link>http://www.philipdaniels.com/tags/sqlite/</link>
    <description>Recent content in Sqlite on Phil&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Jun 2016 20:19:45 +0000</lastBuildDate>
    
	<atom:link href="http://www.philipdaniels.com/tags/sqlite/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Comparing PersistentDictionary with SQLite as a Key-Value Store</title>
      <link>http://www.philipdaniels.com/blog/2016/persistent-dictionary-vs-sqlite/</link>
      <pubDate>Mon, 27 Jun 2016 20:19:45 +0000</pubDate>
      
      <guid>http://www.philipdaniels.com/blog/2016/persistent-dictionary-vs-sqlite/</guid>
      <description>Few choices for in-process persistent data stores When it comes to data storage, developers traditionally have had two choices:
 A full-blown database, usually running as separate process. This includes SQL databases such as MS-SQL and PostGres, and NoSQL databases such as Mongo. Hold everything in RAM in standard .Net classes such as Dictionary.  The former has the drawback that some installation is usually required, and the latter doesn&amp;rsquo;t scale to very large datasets.</description>
    </item>
    
  </channel>
</rss>