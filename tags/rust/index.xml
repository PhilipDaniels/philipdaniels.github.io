<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Phil&#39;s Blog</title>
    <link>https://www.philipdaniels.com/tags/rust/</link>
    <description>Recent content in Rust on Phil&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.philipdaniels.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Some simple Rust async-std examples</title>
      <link>https://www.philipdaniels.com/blog/2019/async-std-demo1/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/async-std-demo1/</guid>
      <description>Introduction As everyone knows, Rust recently stabilized the async/await feature. My first attempt to convert a little program I had to use it was a dismal failure, (reasons are at the bottom of this post), so I thought I would step back and write some simple - and I do mean very simple - examples of how to use await. The final step in this post shows how to download multiple URLs, in parallel, which was the business problem I was trying to solve in the first place.</description>
    </item>
    
    <item>
      <title>Rust File IO</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-file-io/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-file-io/</guid>
      <description>See std::io for more details.
For dealing with the filesystem, such as opening or deleting files, see std::fs.
For manipulating paths, see std::path.
For low-level network IO, see std::net.
One Liners for Reading the Entire File Use read_to_string and read.
These are both fast as they allocate a buffer of the required size to start with.
let contents: String = std::fs::read_to_string(&amp;quot;/some/file&amp;quot;)?; let bytes: Vec&amp;lt;u8&amp;gt; = std::fs::read(&amp;quot;/some/file&amp;quot;)?;  One Liners for Writing the Entire File Use write.</description>
    </item>
    
    <item>
      <title>Hand-Implementing PartialEq, Eq, Hash, PartialOrd and Ord in Rust</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-equality-and-ordering/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-equality-and-ordering/</guid>
      <description>Introduction This article is a short how-to guide for writing your own implementations of the equality, hashing and ordering traits in Rust. Often you can just auto-derive these:
#[derive(PartialEq, Eq, Hash, PartialOrd, Ord)] pub MyStruct { ... }  But sometimes you want to roll your-own, perhaps because you can do it more efficiently than the automatic versions, or you simply want to be more explicit about what it means for two things to be &amp;lsquo;equal&amp;rsquo; or perhaps you want to express relationships between instances of MyStruct and SomeOtherStruct, which the automatic versions can&amp;rsquo;t do.</description>
    </item>
    
    <item>
      <title>An Ergonomic Approach to Configuration in Rust</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-configuration-example/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-configuration-example/</guid>
      <description>Ergonomic Configuration In most of the programs I have written so far the configuration consists of a combination of defaults, optional settings from configuration files, and command line options, in that order of precedence.
And once established, it is usually immutable.
Setting this up is not difficult, but it helps to have a worked example, as otherwise it is easy to get lost in what to call things.
I have created a worked example which has the following features:</description>
    </item>
    
    <item>
      <title>Design of Rust APIs (Collections and Iteration)</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-api-design2/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-api-design2/</guid>
      <description>Iterators as Input Parameters This is reasonable:
fn func1(data: &amp;amp;[i32]) {}  But if a function only needs to iterate over its data you can use the IntoIterator trait to make it more generic:
fn func2&amp;lt;C&amp;gt;(data: C) where C: IntoIterator&amp;lt;Item = i32&amp;gt;  (Ref: API Guidelines)
Constructing and Extending Collections If you have a type that is a collection type, you should consider implementing the FromIterator and Extend traits.</description>
    </item>
    
    <item>
      <title>Design of Rust APIs (AsRef, Into, Cow)</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-api-design/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-api-design/</guid>
      <description>Flexible Input Parameters There are two generic built-in traits you can use to make your function easy to call.
They are AsRef and Into.
AsRef (and AsMut) AsRef allows a function to be called with parameters of differing types - basically anything that allows a reference of the appropriate type to be created cheaply and without ever failing. AsMut is the same but for mutable references.
Example:
fn func1(p1: PathBuf); fn func2(p1: &amp;amp;Path); fn func3&amp;lt;S&amp;gt;(p1: S) where S: AsRef&amp;lt;Path&amp;gt; { let p1 = p1.</description>
    </item>
    
    <item>
      <title>Defining Rust Error Types</title>
      <link>https://www.philipdaniels.com/blog/2019/defining-rust-error-types/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/defining-rust-error-types/</guid>
      <description>Defining your own error type When starting a new project, defining your own error type up-front is a good thing to do. It will result in more ergonomic code, as you can return the same error type from most functions and can get it to work with the ? operator. This is especially important if you use external crates and want to &amp;lsquo;amalgamate&amp;rsquo; their error types.
The strategy defined here is the TL;DR summary of a blog post by Rustmeister BurntSushi.</description>
    </item>
    
  </channel>
</rss>