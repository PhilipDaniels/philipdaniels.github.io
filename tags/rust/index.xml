<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Phil&#39;s Blog</title>
    <link>https://www.philipdaniels.com/tags/rust/</link>
    <description>Recent content in Rust on Phil&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.philipdaniels.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design of Rust APIs (Collections and Iteration)</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-api-design2/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-api-design2/</guid>
      <description>Iterators as Input Parameters This is reasonable:
fn func1(data: &amp;amp;[i32]) {}  But if a function only needs to iterate over its data you can use the IntoIterator trait to make it more generic:
fn func2&amp;lt;C&amp;gt;(data: C) where C: IntoIterator&amp;lt;Item = i32&amp;gt;  (Ref: API Guidelines)
Constructing and Extending Collections If you have a type that is a collection type, you should consider implementing the FromIterator and Extend traits.</description>
    </item>
    
    <item>
      <title>Design of Rust APIs (AsRef, Into, Cow)</title>
      <link>https://www.philipdaniels.com/blog/2019/rust-api-design/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/rust-api-design/</guid>
      <description>Flexible Input Parameters There are two generic built-in traits you can use to make your function easy to call.
They are AsRef and Into.
AsRef (and AsMut) AsRef allows a function to be called with parameters of differing types - basically anything that allows a reference of the appropriate type to be created cheaply and without ever failing. AsMut is the same but for mutable references.
Example:
fn func1(p1: PathBuf); fn func2(p1: &amp;amp;Path); fn func3&amp;lt;S&amp;gt;(p1: S) where S: AsRef&amp;lt;Path&amp;gt; { let p1 = p1.</description>
    </item>
    
    <item>
      <title>Defining Rust Error Types</title>
      <link>https://www.philipdaniels.com/blog/2019/defining-rust-error-types/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2019/defining-rust-error-types/</guid>
      <description>Defining your own error type When starting a new project, defining your own error type up-front is a good thing to do. It will result in more ergonomic code, as you can return the same error type from most functions and can get it to work with the ? operator. This is especially important if you use external crates and want to &amp;lsquo;amalgamate&amp;rsquo; their error types.
The strategy defined here is the TL;DR summary of a blog post by Rustmeister BurntSushi.</description>
    </item>
    
  </channel>
</rss>