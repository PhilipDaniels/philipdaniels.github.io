<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c# on Phil&#39;s Blog</title>
    <link>https://www.philipdaniels.com/tags/c#/</link>
    <description>Recent content in c# on Phil&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Nov 2017 20:19:45 +0000</lastBuildDate>
    
	<atom:link href="https://www.philipdaniels.com/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Summary of Stephen Cleary&#39;s &#39;Tour of Task&#39; Series</title>
      <link>https://www.philipdaniels.com/blog/2017/tour-of-task/</link>
      <pubDate>Mon, 06 Nov 2017 20:19:45 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2017/tour-of-task/</guid>
      <description>Summary of Stephen Cleary&amp;rsquo;s &amp;lsquo;A Tour of Task&amp;rsquo; articles The first article
 Task as used by TPL is completely different to Task as used by async. The vast majority of Task members have no place in async code. There are two types of Task ** Delegate tasks, which have code to run ** Promise tasks, which represent an event or signal (e.g. IO or timer based) Most TPL code uses Delegate tasks across multiple threads,, most async code uses Promise tasks which don&amp;rsquo;t tie up a thread.</description>
    </item>
    
    <item>
      <title>Comparing PersistentDictionary with SQLite as a Key-Value Store</title>
      <link>https://www.philipdaniels.com/blog/2016/persistent-dictionary-vs-sqlite/</link>
      <pubDate>Mon, 27 Jun 2016 20:19:45 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2016/persistent-dictionary-vs-sqlite/</guid>
      <description>Few choices for in-process persistent data stores When it comes to data storage, developers traditionally have had two choices:
 A full-blown database, usually running as separate process. This includes SQL databases such as MS-SQL and PostGres, and NoSQL databases such as Mongo. Hold everything in RAM in standard .Net classes such as Dictionary.  The former has the drawback that some installation is usually required, and the latter doesn&amp;rsquo;t scale to very large datasets.</description>
    </item>
    
  </channel>
</rss>