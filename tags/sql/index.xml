<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Phil&#39;s Blog</title>
    <link>https://www.philipdaniels.com/tags/sql/</link>
    <description>Recent content in SQL on Phil&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Oct 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.philipdaniels.com/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Handy SQL HAVING Clauses</title>
      <link>https://www.philipdaniels.com/blog/2021/havings/</link>
      <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2021/havings/</guid>
      <description>Tricks with the &amp;lsquo;HAVING&amp;rsquo; clause Over the years I have collected a few handy HAVING clauses for SQL work. Here&amp;rsquo;s a summary, with some test cases.
n.b. Watch out if you have nulls in your data! Some of these expressions will then degenerate into expressions comparing NULL for equality, which is obviously never true.
We&amp;rsquo;ll need a table for testing:
drop table foo; create table foo(a int, b int) Contents  All values in B are distinct No NULLs in B B is all positive or all negative min(B) is negative, max(B) isn&amp;rsquo;t B has at least one zero min(B) or max(B) or both is 0 B has more than 1 distinct value B has only 1 distinct value, or nulls B deviates above and below const by the same amount Values in B are sequential with no gaps  All values in B are distinct delete foo; insert into foo(a, b) values (1, 0); insert into foo(a, b) values (1, 1); insert into foo(a, b) values (1, 2); insert into foo(a, b) values (2, 0); insert into foo(a, b) values (2, 0); select a from foo group by a having count(distinct b) = count(b) No NULLs in B delete foo; insert into foo(a, b) values (1, 0); insert into foo(a, b) values (1, 1); insert into foo(a, b) values (1, 2); insert into foo(a, b) values (2, 0); insert into foo(a, b) values (2, null); select a from foo group by a having count(*) = count(b) B is all positive or all negative delete foo; insert into foo(a, b) values (1, 0); insert into foo(a, b) values (1, 1); insert into foo(a, b) values (1, 2); insert into foo(a, b) values (2, 1); insert into foo(a, b) values (2, 2); insert into foo(a, b) values (2, 3); insert into foo(a, b) values (3, -1); insert into foo(a, b) values (3, -2); insert into foo(a, b) values (3, -3); insert into foo(a, b) values (4, 4); insert into foo(a, b) values (4, -2); insert into foo(a, b) values (4, -3); insert into foo(a, b) values (5, 0); insert into foo(a, b) values (5, 0); insert into foo(a, b) values (5, 0); select a from foo group by a having min(b) * max(b) &amp;gt; 0 If you change the above to having sign(min(b)) = sign(max(b)) then B can be all positive, all negative, or all zero.</description>
    </item>
    
  </channel>
</rss>