<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Phil&#39;s Blog</title>
    <link>https://www.philipdaniels.com/tags/sql/</link>
    <description>Recent content in SQL on Phil&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Jan 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.philipdaniels.com/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A C# Source Generator for Oracle UDTs</title>
      <link>https://www.philipdaniels.com/blog/2022/oracle-udt-class-generator/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2022/oracle-udt-class-generator/</guid>
      <description>Introduction Working with Oracle recently, I found myself wanting an equivalent of SQL Server&amp;rsquo;s Table-Valued Parameters - a way to pass structured records, or tables of such records, into stored procedures. The Oracle equivalent is the User-Defined Data Type but using them requires quite a bit of work. I&amp;rsquo;ve created BassUtils.Oracle which contains helpers for creating the correct OracleCommand parameters, described in a previous blog post. But that still leaves you having to manually code the C# class that Oracle requires to map them to and from the Oracle SQL types.</description>
    </item>
    
    <item>
      <title>BassUtils.Oracle - Helpers for Calling Oracle from C#</title>
      <link>https://www.philipdaniels.com/blog/2021/oracle-from-csharp/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2021/oracle-from-csharp/</guid>
      <description>Oracle, eh? My new job requires me to deal with Oracle for the first time in anger. I&amp;rsquo;ve found Oracle to be both impressive (PL/SQL is far more powerful than T-SQL) and frustrating. When things go wrong the error messages are often confusing, at best, and at worst positively misleading.
Most of my time has been spent trying to get data in and out of Oracle using C#, in particular I have been looking at doing bulk-loads of classes, in other words, how to get multiple records of data into and out of Oracle ergonomically.</description>
    </item>
    
    <item>
      <title>Handy SQL HAVING Clauses</title>
      <link>https://www.philipdaniels.com/blog/2021/havings/</link>
      <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.philipdaniels.com/blog/2021/havings/</guid>
      <description>Tricks with the &amp;lsquo;HAVING&amp;rsquo; clause Over the years I have collected a few handy HAVING clauses for SQL work. Here&amp;rsquo;s a summary, with some test cases.
n.b. Watch out if you have nulls in your data! Some of these expressions will then degenerate into expressions comparing NULL for equality, which is obviously never true.
We&amp;rsquo;ll need a table for testing:
drop table foo; create table foo(a int, b int) Contents  All values in B are distinct No NULLs in B B is all positive or all negative min(B) is negative, max(B) isn&amp;rsquo;t B has at least one zero min(B) or max(B) or both is 0 B has more than 1 distinct value B has only 1 distinct value, or nulls B deviates above and below const by the same amount Values in B are sequential with no gaps  All values in B are distinct delete foo; insert into foo(a, b) values (1, 0); insert into foo(a, b) values (1, 1); insert into foo(a, b) values (1, 2); insert into foo(a, b) values (2, 0); insert into foo(a, b) values (2, 0); select a from foo group by a having count(distinct b) = count(b) No NULLs in B delete foo; insert into foo(a, b) values (1, 0); insert into foo(a, b) values (1, 1); insert into foo(a, b) values (1, 2); insert into foo(a, b) values (2, 0); insert into foo(a, b) values (2, null); select a from foo group by a having count(*) = count(b) B is all positive or all negative delete foo; insert into foo(a, b) values (1, 0); insert into foo(a, b) values (1, 1); insert into foo(a, b) values (1, 2); insert into foo(a, b) values (2, 1); insert into foo(a, b) values (2, 2); insert into foo(a, b) values (2, 3); insert into foo(a, b) values (3, -1); insert into foo(a, b) values (3, -2); insert into foo(a, b) values (3, -3); insert into foo(a, b) values (4, 4); insert into foo(a, b) values (4, -2); insert into foo(a, b) values (4, -3); insert into foo(a, b) values (5, 0); insert into foo(a, b) values (5, 0); insert into foo(a, b) values (5, 0); select a from foo group by a having min(b) * max(b) &amp;gt; 0 If you change the above to having sign(min(b)) = sign(max(b)) then B can be all positive, all negative, or all zero.</description>
    </item>
    
  </channel>
</rss>